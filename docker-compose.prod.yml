# Production docker-compose configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
    volumes: []  # Remove development volume mounts
    restart: unless-stopped

  backend:
    build:
      context: ./backend  
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET=${JWT_SECRET}
    volumes: []  # Remove development volume mounts
    restart: unless-stopped

  postgres:
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always

  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: always

  qdrant:
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M